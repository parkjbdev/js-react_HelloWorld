{"version":3,"sources":["component/MovieApp/Movie.js","component/MovieApp/MovieApp.js","serviceWorker.js","index.js"],"names":["Movie","title","year","summary","poster","className","style","width","src","alt","slice","MovieApp","props","getMovies","a","axios","get","movies","data","setState","isLoading","console","log","state","this","size","color","loading","map","movie","key","id","medium_cover_image","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wWA0BeA,MArBf,YAAkD,IAAjCC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,OACnC,OACI,yBAAKC,UAAU,gBAAgBC,MAAO,CAACC,MAAO,UAC1C,yBAAKF,UAAW,aACZ,yBAAKA,UAAU,WAAWG,IAAKJ,EAAQK,IAAKR,IAC5C,wBAAII,UAAW,mBAAoBJ,GACnC,wBAAII,UAAW,cAAeH,GAC9B,uBAAGG,UAAW,aAAcF,EAAQO,MAAM,EAAE,KAA5C,UCoDDC,E,kDAxDX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAOVC,UARmB,sBAQP,8BAAAC,EAAA,sEAKEC,IAAMC,IAAI,yDALZ,gBAGOC,EAHP,EAEJC,KACIA,KAAOD,OAIf,EAAKE,SAAS,CAACF,WACf,EAAKE,SAAS,CAACC,WAAW,IAC1BC,QAAQC,IAAI,sBATJ,2CANR,EAAKC,MAAQ,CACTH,WAAW,EACXH,OAAQ,IAJG,E,gEAqBfO,KAAKX,c,+BAGC,IAAD,EACuBW,KAAKD,MAA1BH,EADF,EACEA,UAAWH,EADb,EACaA,OAElB,OACI,6BAASZ,UAAU,aAEXe,EACK,yBAAKf,UAAU,UACZ,kBAAC,IAAD,CAAYA,UAAW,SAAUoB,KAAM,IAAKC,MAAO,UACvCC,QAASH,KAAKD,MAAMH,aAGnC,yBAAKf,UAAU,cAEZY,EAAOW,KAAI,SAAAC,GAEX,OADAR,QAAQC,IAAIO,GACL,kBAAC,EAAD,CACHC,IAAKD,EAAME,GACX3B,OAAQyB,EAAMG,mBACd7B,QAAS0B,EAAM1B,QACfD,KAAM2B,EAAM3B,KACZ6B,GAAIF,EAAME,GACV9B,MAAO4B,EAAM5B,iB,GA/CtBgC,IAAMC,WCKTC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDuHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.d8b583c6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from 'prop-types'\r\nimport '../../css/MovieApp/MovieApp.css';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\n\r\nfunction Movie({ title, year, summary, poster }) {\r\n    return (\r\n        <div className=\"card movieBox\" style={{width: \"18rem\"}}>\r\n            <div className={\"card-body\"}>\r\n                <img className=\"card-img\" src={poster} alt={title}/>\r\n                <h2 className={\"card-title name\"}>{title}</h2>\r\n                <h3 className={\"card-title\"}>{year}</h3>\r\n                <p className={\"card-text\"}>{summary.slice(0,180)}...</p>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nMovie.propTypes = {\r\n    year: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Movie;","import React from \"react\";\r\nimport '../../css/MovieApp/MovieApp.css';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport PuffLoader from \"react-spinners/PuffLoader\"\r\nimport axios from 'axios';\r\nimport Movie from \"./Movie\";\r\n\r\nclass MovieApp extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: true,\r\n            movies: [],\r\n        }\r\n    }\r\n\r\n    getMovies = async () => {\r\n        const {\r\n            data: {\r\n                data: {movies},\r\n            }\r\n        } = await axios.get(\"https://yts.mx/api/v2/list_movies.json?sort_by=rating\");\r\n\r\n        this.setState({movies});\r\n        this.setState({isLoading: false});\r\n        console.log(\"Loading Successful\");\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getMovies();\r\n    }\r\n\r\n    render() {\r\n        const {isLoading, movies} = this.state;\r\n\r\n        return (\r\n            <section className=\"container\">\r\n                {\r\n                    isLoading ?\r\n                        (<div className=\"loader\">\r\n                            <PuffLoader className={\"loader\"} size={150} color={\"#123abc\"}\r\n                                        loading={this.state.isLoading}/>\r\n                        </div>)\r\n                        :\r\n                        (<div className=\"movies row\">\r\n                        {\r\n                            movies.map(movie => {\r\n                            console.log(movie);\r\n                            return <Movie\r\n                                key={movie.id}\r\n                                poster={movie.medium_cover_image}\r\n                                summary={movie.summary}\r\n                                year={movie.year}\r\n                                id={movie.id}\r\n                                title={movie.title} />\r\n                            })\r\n                        }\r\n                        </div>)\r\n                }\r\n            </section>\r\n        );\r\n    };\r\n}\r\n\r\nexport default MovieApp;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n// import App from './component/DefaultApp/App';\r\n// import Game from './component/TicTacToe/TicTacToe';\r\nimport MovieApp from './component/MovieApp/MovieApp'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <MovieApp />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}