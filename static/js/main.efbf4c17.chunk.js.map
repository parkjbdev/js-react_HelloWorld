{"version":3,"sources":["component/DefaultApp/logo.svg","component/DefaultApp/App.js","component/TicTacToe/TicTacToe.js","serviceWorker.js","index.js"],"names":["module","exports","App","Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","checkWinner","lines","length","a","b","c","checkFull","cnt","Game","state","history","Array","fill","turn","setState","turnCount","squareID","slice","alert","nextTurn","concat","winner","status","current","handleClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.efbf4c17.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport './TicTacToe.css';\r\n\r\nfunction Square(props) {\r\n\treturn (\r\n\t\t<button\r\n\t\t\tclassName=\"square\"\r\n\t\t\tonClick={props.onClick}\r\n\t\t>\r\n\t\t\t{props.value}\r\n\t\t</button>\r\n\t);\r\n}\r\n\r\nclass Board extends React.Component {\r\n\trenderSquare(i) {\r\n\t\treturn <Square\r\n\t\t\tvalue={this.props.squares[i]}\r\n\t\t\tonClick={() => this.props.onClick(i)}\r\n\t\t/>;\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<div className=\"board-row\">\r\n\t\t\t\t\t{this.renderSquare(0)}\r\n\t\t\t\t\t{this.renderSquare(1)}\r\n\t\t\t\t\t{this.renderSquare(2)}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"board-row\">\r\n\t\t\t\t\t{this.renderSquare(3)}\r\n\t\t\t\t\t{this.renderSquare(4)}\r\n\t\t\t\t\t{this.renderSquare(5)}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"board-row\">\r\n\t\t\t\t\t{this.renderSquare(6)}\r\n\t\t\t\t\t{this.renderSquare(7)}\r\n\t\t\t\t\t{this.renderSquare(8)}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nfunction checkWinner(squares) {\r\n\tconst lines = [\r\n\t\t[0, 1, 2],\r\n\t\t[3, 4, 5],\r\n\t\t[6, 7, 8],\r\n\t\t[0, 3, 6],\r\n\t\t[1, 4, 7],\r\n\t\t[2, 5, 8],\r\n\t\t[0, 4, 8],\r\n\t\t[2, 4, 6],\r\n\t];\r\n\r\n\tfor(let i = 0;i < lines.length; i++)\r\n\t{\r\n\t\tconst [a, b, c] = lines[i];\r\n\t\tif(squares[a] && squares[a] === squares[b] && squares[a] === squares[c])\treturn squares[a];\r\n\t}\r\n\treturn null;\r\n}\r\nfunction checkFull(squares) {\r\n\tlet cnt = 0;\r\n\tfor(let i = 0;i < squares.length;i++)\r\n\t\tif(squares[i])\tcnt++;\r\n\r\n\tif(cnt === squares.length)\treturn true;\r\n}\r\n\r\nclass Game extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thistory: [{\r\n\t\t\t\tsquares: Array(9).fill(null),\r\n\t\t\t}],\r\n\t\t\tturn: 'X',\r\n\t\t}\r\n\t}\r\n\r\n\tnextTurn() {\r\n\t\tif(this.state.turn === 'X')\tthis.setState({turn: 'O'});\r\n\t\telse if(this.state.turn === 'O')\tthis.setState({turn: 'X'});\r\n\t\tthis.setState({turnCount: this.state.turnCount + 1});\r\n\t}\r\n\r\n\thandleClick(squareID) {\r\n\t\tconst history = this.state.history;\r\n\t\tconst current = history[history.length - 1];\r\n\t\tconst squares = current.squares.slice();\r\n\r\n\t\tif(checkWinner(squares) || checkFull(squares))\treturn;\r\n\r\n\t\tif(!squares[squareID]) {\r\n\t\t\tsquares[squareID] = this.state.turn;\r\n\t\t\tthis.nextTurn();\r\n\t\t\tthis.setState({\r\n\t\t\t\thistory: history.concat([{\r\n\t\t\t\t\tsquares: squares\r\n\t\t\t\t}]),\r\n\t\t\t});\r\n\t\t}\r\n\t\telse\talert(\"안돼여\");\r\n\r\n\t\tconst winner = checkWinner(squares);\r\n\t\tif(winner)\talert('Winner: ' + winner);\r\n\t\telse if(checkFull(squares))\talert(\"Draw\");\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst history = this.state.history;\r\n\t\tconst current = history[history.length - 1];\r\n\t\tconst winner = checkWinner(current.squares);\r\n\r\n\t\tlet status;\r\n\t\tif(winner)\tstatus = 'Winner: ' + winner;\r\n\t\telse status = 'Next player: ' + this.state.turn;\r\n\t\tif(checkFull(current.squares))\tstatus = 'Draw!';\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"game\">\r\n\t\t\t\t<div className=\"game-board\">\r\n\t\t\t\t\t<Board\r\n\t\t\t\t\t\tsquares={current.squares}\r\n\t\t\t\t\t\tonClick={(i) => this.handleClick(i)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"game-info\">\r\n\t\t\t\t\t<div>{status}</div>\r\n\t\t\t\t\t<ol>{/* TODO */}</ol>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n// https://ko.reactjs.org/tutorial/tutorial.html#setup-option-1-write-code-in-the-browser\r\n\r\nexport default Game;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/DefaultApp/App';\nimport Game from './component/TicTacToe/TicTacToe';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    {/*<App />*/}\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}